import std.io.*;
import std.sys.*;
import _lib.benchmark.*;

var base_path = 'benchmark';
var env = Environment.new(base_path);

env.addLanguage('Clever', 'clever %f', 'clever -v', '^Clever - (.*)', 'clv');
env.addLanguage('Python', 'python %f', 'python -V', '^Python (.*)', 'py');
env.addLanguage('Lua', 'lua %f', 'lua -v', '^Lua ([^ ]+)', 'lua');
env.addLanguage('Java', ['javac %f', 'java -cp %d %o'], 'java -version', '^java version "([^"]+)', 'java', ['%d/%o.class']);
env.addLanguage('PHP', 'php %f', 'php -v', '^PHP ([^ ]+)', 'php');
env.addLanguage('Ruby', 'ruby %f', 'ruby -v', '^ruby ([^ ]+)', 'rb');
env.addLanguage('C', ['gcc -02 -o %d/%o.exe %f', '%d/%o.exe'], 'gcc -v', '\ngcc version ([^ ]+) \(.*$', 'c', ['%d/%o.exe']);

env.bootstrap();

println("=== Available Languages ===");
env.langs.each(function(l) {
	if (l.is_ok == false) {
		println(l.name + ' -- OFF');
		return;
	}
	println(l.name + ' ('+ l.version+') -- OK');
});

println("");
println("=== Tests ===");
var i = 0;
env.groups.each(function(g) {
	print(++i + ') ');
	println(g.info);

	g.tests.each(function(t) {
		println('-- '+ t.lang.name + ': ');
		var rs = t.run();
		println('**** '+ rs.banner + ' ('+rs.value+')');
		//println('***** '+ rs.text);
		println('  Total time: '+ rs.tt + ' s');
	});
});
