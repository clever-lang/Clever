import std.io.*;
import std.regex.*;
import std.file.*;
import std.sys.*;
import std.crypto.*;
import std.reflection.*;

//import classes.language.*; -- BUG

function readFileContent(file) {
	var f = File.new(file, File.IN);
	var buffer = '';

	while (!f.eof()) {
	 buffer = buffer + f.readLine();
		if (!f.eof()) {
			buffer = buffer + "\n";
		}
	}
	f.close();
	return buffer;
}

function _exec(command, hide_error = false) {
	var output_file = ".bench-output-" + time();
	output_file = output_file + "-" + md5(command + output_file);
	var cmd = command + " > " + output_file + " 2>&1";
	var rs = system(cmd);
	if (rs != 0) {
		if (!hide_error) {
			println('ERROR on command: ', command, readFileContent(output_file));
		}
		remove(output_file);
		return false;
	}
	var buffer = readFileContent(output_file);
	remove(output_file);
	return buffer;
}

class Language {
	var name;
	var command;
	var check_cmd;
	var version_er;
	var extension;
	var tear_down;
	var version;
	var is_ok;

	function Language(name, command, check_cmd, version_er, extension, tear_down=null) {
		this.name = name;
		this.command = command;
		this.check_cmd = check_cmd;
		this.version_er = version_er;
		this.extension = extension;
		this.tear_down = tear_down;
		this.is_ok = false;
	}

	function check() {
		var version_str = _exec(this.check_cmd, true);
		
		if (version_str == false) {
			return false;
		}
		
		var re = Regex.new(this.version_er);

		if (!re.match(version_str)) {
			return false;
		}

		this.version = re.group(1);
		this.is_ok = true;

		return true;
	}
}

class Result {
	var text;
	var banner;
	var value;
	var tt;

	function Result(text, tt) {
		this.tt = tt;
		this.text = text;
		
		var re = Regex.new("^(.*?)\r?\n(.*)\r?\n?");
		if (!re.match(text)) {
			println('ERROR: invalid output.', text, '*******');
			return;
		}
		this.banner = re.group(1);
		this.value = re.group(2);
	}
}

class Test {
	var file;
	var lang;

	function Test(file, lang) {
		this.file = file;
		this.lang = lang;
	}
	
	function rewrite(xcmd) {
		xcmd = xcmd.replace('%f', this.file);
		xcmd = xcmd.replace('%d', dirname(this.file));
		
		var re = Regex.new("^(.*)\.(.*?)$");
		re.match(basename(this.file));
		xcmd = xcmd.replace('%o', re.group(1));
		
		return xcmd;
	}

	function run() {
		var exec = '';
		var cmd = this.lang.command;
		var t = Reflect.new(cmd);
		if (t.isArray()) {
			exec = cmd.pop();
			this.prepare(cmd);
		}
		else { exec = cmd; }
		
        exec = this.rewrite(exec);
		var tini = microtime();
		var output = _exec(exec);
		var tfim = microtime();
		
		//Tear Down files
		if (this.lang.tear_down) {
			var i=0,f='';
			while (i < this.lang.tear_down.size()) {
				f = this.rewrite(this.lang.tear_down.at(i));
				remove(f);
				i++;
			}
		}
		
		return Result.new(output, (tfim - tini));
	}
	
	function prepare(cmd) {
		var i = 0, exec = '';
		while (i < cmd.size()) {
			exec = cmd.at(i);
			exec = this.rewrite(exec);
			_exec(exec);
			i++;
		}
	}
}

class GroupTest {
	var path;
	var info;
	var env;
	var tests;

	function GroupTest(env, path, info) {
		this.env = env;
		this.info = info;
		this.path = path;
		this.loadTests();
	}

	function loadTests() {
		this.tests = [];
		var files = glob(this.path + '/*');
		var i = 0;
		while (i < files.size()) {
			var file = files[i++];
			this.checkFile(file);
		}
	}

	function checkFile(file) {
		if (file.toLower().endsWith('info.txt') == 1) {
			return;
		}
		var lang = this.getLanguage(file);
		if (lang) {
			this.tests.append(Test.new(file, lang));
		}
	}

	function getExtension(file) {
		var re = Regex.new("\.(.*?)$");
		if (!re.match(file)) {
			return false;
		}
		return re.group(1);
	}

	function getLanguage(file) {
		var ext = this.getExtension(file);
		var i = 0;
		while (i < this.env.langs.size()) {
			var lang = this.env.langs[i++];
			if (lang.extension == ext) {
				if (!lang.is_ok) {
					continue;
				}
				return lang;
			}
		}
		return false;
	}
}

class Environment {
	var basePath;
	var langs;
	var groups;

	function Environment(base_path) {
		this.basePath = base_path;
		this.langs = [];
		this.groups = [];
	}

	function addLanguage(name, command, check_cmd, version_er, extension, tear_down=null) {
		var l = Language.new(name, command, check_cmd, version_er, extension, tear_down);
		this.langs.append(l);
		return l;
	}

	function bootstrap() {
		this.checkProgLangs();
		this.loadGroupTests();
	}

	function checkProgLangs() {
		this.langs.each(function(l) {
			l.check();
		});
	}

	function loadGroupTests() {
		var path = this.basePath + '/tests',
		tests_dir = glob(path + '/*'),
		super = this;
		var i = 0;
		while (i < tests_dir.size()) {
			var group_dir = tests_dir[i],
			info_file = group_dir + "/info.txt";
			i++;
			if (!file_exists(info_file)) {
				continue;
			}
			var info = readFileContent(info_file);
			var group = GroupTest.new(this, group_dir, info);
			this.groups.append(group);
		}
	}
}
